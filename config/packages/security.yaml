security:
    role_hierarchy:
        ROLE_2FA_ADMIN: [ 'ROLE_ADMIN' ]
        ROLE_ADMIN: [ 'ROLE_SONATA_ADMIN' ]

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        chain_provider:
            chain:
                providers: [ app_user_provider_id, app_user_provider_email ]
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider_id:
            entity:
                class: 'App\Entity\User'
                property: 'id'

        app_user_provider_email:
            entity:
                class: 'App\Entity\User'
                property: 'email'

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        admin:
            pattern: /admin(.*)
            context: user
            entry_point: draw_admin_login
            draw_admin_login:
                provider: app_user_provider_email
                use_forward: false
                use_referer: true
                required_role: 'ROLE_SONATA_ADMIN'
            logout:
                path: admin_logout
                target: admin_login
            draw_messenger_message:
                provider: 'app_user_provider_id'
            two_factor:
                provider: app_user_provider_email
                auth_form_path: admin_2fa_login
                check_path: admin_2fa_login_check

        api:
            pattern: /api(.*)
            stateless: true
            draw_jwt:
                provider: 'app_user_provider_id'
                key: 'acme'
                algorithm: 'HS256'
                service_alias: 'Draw\Component\Security\Http\Authenticator\JwtAuthenticator'

        main:
            context: user
            draw_messenger_message:
                provider: 'app_user_provider_id'
            draw_jwt:
                provider: 'app_user_provider_id'
                key: 'acme'
                algorithm: 'HS256'

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/admin/2fa, roles: IS_AUTHENTICATED_2FA_IN_PROGRESS }
        - { path: ^/admin/login$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/logout$, roles: PUBLIC_ACCESS }
        - { path: ^/admin/resetting, roles: PUBLIC_ACCESS }
        - { path: ^/admin/change-password, roles: ROLE_USER }
        - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
